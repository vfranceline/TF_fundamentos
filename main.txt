# Print "Digite N: "

# Initialize variables
addi $s1, $zero, 0	 # Counter (current N)
addi $s0, $zero, 0   # Sum (accumulator)

addi $sp, $sp, -9  # Reserve space for "Digite N: " on stack

addi $t0, $zero, 68  # 'D'
sb $t0, 0($sp)
addi $t0, $zero, 105 # 'i'
sb $t0, 1($sp)
addi $t0, $zero, 103 # 'g'
sb $t0, 2($sp)
addi $t0, $zero, 105 # 'i'
sb $t0, 3($sp)
addi $t0, $zero, 116 # 't'
sb $t0, 4($sp)
addi $t0, $zero, 101 # 'e'
sb $t0, 5($sp)
addi $t0, $zero, 32  # ' '
sb $t0, 6($sp)
addi $t0, $zero, 78  # 'N'
sb $t0, 7($sp)
addi $t0, $zero, 0   # null terminator
sb $t0, 8($sp)

addi $a0, $sp, 0    # Set message address to stack location
addi $v0, $zero, 51  # syscall for printing string
syscall
addu $s1, $zero, $a0   # Counter (current N)

bne $s1, $zero, loop

# Calculate sum using a loop
loop:
    beq $s1, $zero, done

    # Add current N to the sum
    add $s0, $s0, $s1

    # Decrement N
    addi $s1, $s1, -1

    j loop

done:

# Print "soma ="
addi $sp, $sp, -8  # Reserve space for "soma =" on stack

addi $t0, $zero, 115 # 's'
sb $t0, 0($sp)
addi $t0, $zero, 111 # 'o'
sb $t0, 1($sp)
addi $t0, $zero, 109 # 'm'
sb $t0, 2($sp)
addi $t0, $zero, 97  # 'a'
sb $t0, 3($sp)
addi $t0, $zero, 32  # ' '
sb $t0, 4($sp)
addi $t0, $zero, 61  # '='
sb $t0, 5($sp)
addi $t0, $zero, 32  # ' '
sb $t0, 6($sp)
addi $t0, $zero, 0   # null terminator
sb $t0, 7($sp)

addi $a0, $sp, 0    # Set message address to stack location
addi $a1, $s0, 0	# current value of the sum
addi $v0, $zero, 56  # syscall for printing string
syscall
